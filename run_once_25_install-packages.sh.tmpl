#!/bin/sh

set -e

# Check environment

if [[ "$TERM" =~ "screen".* ]]; then
  echo "This script must not be run under a tmux session."
  exit 1
fi

if [[ $EUID -eq 0 ]]; then
  echo "This script must not be run as root"
  exit 1
fi

cd {{ .chezmoi.sourceDir }}
pwd

{{- if eq .chezmoi.os "linux" }}
# Linux
{{- if eq .chezmoi.osRelease.id "ubuntu" }}
sudo apt-get install git-lfs -y
{{- end }}
{{- else if eq .chezmoi.os "darwin" }}
###################### macOS Start ######################

echo macOS detected.

set -x

echo Updating Homebrew.
# brew analytics off
# brew cask
# brew tap caskroom/versions
brew update
export HOMEBREW_NO_AUTO_UPDATE=1
brew upgrade || true

echo Installing essential packages.
brew bundle --verbose || true
BREW_PREFIX=$(brew --prefix)

ln -s "${BREW_PREFIX}/bin/gsha256sum" "${BREW_PREFIX}/bin/sha256sum" || true

# Install fzf
if [ ! -f ~/.fzf.zsh ]; then
  echo Installing fzf.
  ${BREW_PREFIX}/opt/fzf/install --all --no-bash --no-zsh --no-fish
fi

if [ ! -f /usr/local/bin/besttrace ]; then
  echo Installing besttrace.
  cd /tmp
  wget https://cdn.ipip.net/17mon/besttrace4linux.zip -O besttrace4linux.zip
  unzip besttrace4linux.zip
  sudo mv besttracemac /usr/local/bin/besttrace
  sudo chmod +x /usr/local/bin/besttrace
  rm -f besttrace*
  cd -
fi

if [ ! -f /usr/local/lib/opensc-pkcs11.so ]; then
  # Workaround of https://github.com/OpenSC/OpenSC/issues/1008
  sudo rm /usr/local/lib/opensc-pkcs11.so
  sudo cp /usr/local/Cellar/opensc/0.20.0/lib/opensc-pkcs11.so /usr/local/lib
fi

# Install Powerline compatible fonts
# echo Installing Powerline fonts.
# git clone https://github.com/powerline/fonts.git --depth=1
# cd fonts && ./install.sh
# cd .. && rm -rf fonts

###################### macOS End #######################
{{- end }}

# Universal
echo Running universal scripts.

git lfs install && sudo git lfs install --system

echo Installing CLI stuff.

if [ ! -e "${ZDOTDIR:-$HOME}/.zprezto" ]; then
  git clone --recursive https://github.com/sorin-ionescu/prezto.git "${ZDOTDIR:-$HOME}/.zprezto"
  git clone --recurse-submodules https://github.com/belak/prezto-contrib "${ZDOTDIR:-$HOME}/.zprezto/contrib"
fi

if [ ! -e "$HOME/.zinit" ]; then
  mkdir ~/.zinit
  git clone https://github.com/zdharma/zinit.git ~/.zinit/bin
  zsh -i -c "zinit self-update"
fi

if [ ! -f ~/.fzf.zsh ]; then
  git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
  ~/.fzf/install
fi

# Headlessly install n to ~/.n without modifying ~/.zshrc
# only if n, node and npm don't exist in $PATH
if ! command -v n &> /dev/null && ! command -v node &> /dev/null && ! command -v npm &> /dev/null; then
  export N_PREFIX="$HOME/.n"
  curl -L https://git.io/n-install | N_PREFIX=~/.n bash -s -- -y -n
fi

#############

echo Applying tmux conf
ln -s $HOME/.tmux/tmux.conf $HOME/.tmux.conf || true

#############

echo Installing python3 pip packages.
sudo python3 -m pip install virtualenv virtualenvwrapper psutil

#############

if [ ! -f /usr/local/bin/prettyping ]; then
  echo Installing prettyping.
  sudo wget -O /usr/local/bin/prettyping https://raw.githubusercontent.com/denilsonsa/prettyping/master/prettyping
  sudo chmod +x /usr/local/bin/prettyping
fi

#############

if [ ! -e "$HOME/.tmux/plugins/tpm" ]; then
  echo "Installing TPM (Tmux Plugin Manager)"
  git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm

  # Install TPM plugins.
  # TPM requires running tmux server, as soon as `tmux start-server` does not work
  # create dump __noop session in detached mode, and kill it when plugins are installed
  printf "Install TPM plugins\n"
  tmux new -d -s __noop >/dev/null 2>&1 || true
  tmux set-environment -g TMUX_PLUGIN_MANAGER_PATH "~/.tmux/plugins"
  "$HOME"/.tmux/plugins/tpm/bin/install_plugins || true
  tmux kill-session -t __noop >/dev/null 2>&1 || true
fi

#############

if [ ! -e "$HOME/.cache/dein" ]; then
  echo "Install dein.vim"
  curl https://raw.githubusercontent.com/Shougo/dein.vim/master/bin/installer.sh > installer.sh
  sh ./installer.sh ~/.cache/dein
  rm ./installer.sh
fi

#############

set +x

echo "install-packages.sh complete"
