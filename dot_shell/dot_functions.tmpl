#!/usr/bin/env bash

# `.functions` provides helper functions for shell.
#
# This file is used as a part of `.shell_env`


# === Commonly used functions ===

{{- if eq .chezmoi.os "darwin" }}
dns () {
  ip $(kdig +short $1 | tail -n1)
}

serveo () {
  echo Connecting to remote. You may need to authenticate to continue.
  autossh -M 0 -R yay.birkhoff.me:80:localhost:$1 serveo
}

# `favicon 1.png` will generate 4 sizes of favicon.ico
favicon () {
  convert $1 -background white \
    \( -clone 0 -resize 16x16 -extent 16x16 \) \
    \( -clone 0 -resize 32x32 -extent 32x32 \) \
    \( -clone 0 -resize 48x48 -extent 48x48 \) \
    \( -clone 0 -resize 64x64 -extent 64x64 \) \
    -delete 0 -alpha off -colors 256 favicon.ico
}

# cd into whatever is the forefront Finder window.
cdf () {
  local path=$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')
  echo "$path"
  cd "$path"
}
{{- end }}

prev () {
  # prev [PATH] [DEPTH]
  if [[ -v $2 ]]; then
    local DEPTH=$2
  else
    local DEPTH=1
  fi
  FZF_DEFAULT_COMMAND="ag --hidden --ignore .git -f --depth $DEPTH -g \"\" $1" \
    fzf --preview 'if file -i {}|grep -q binary; then file -b {}; else bat --color "always" --line-range :55 {}; fi'
}

# e: edit with default editor, if no parameters set, use fzf + bat to preview
unalias e
e () {
  if [[ ! -z $1 ]]; then
    $VISUAL $1
  else
    file=$(prev); [[ ! -z $file ]] && $VISUAL $file
  fi
}

ip () {
  curl -Ls https://api.birkhoff.me/v1/ip/$1 | jq
}

transfer() {
  # check arguments
  if [ $# -eq 0 ]; then
    echo "No arguments specified. Usage:\necho transfer /tmp/test.md\ncat /tmp/test.md | transfer test.md"
    return 1
  fi

  # get temporarily filename, output is written to this file show progress can be showed
  local tmpfile=$( mktemp -t transferXXX )
  # upload stdin or file
  local file=$1

  if tty -s;  then
    local basefile=$(basename "$file" | sed -e 's/[^a-zA-Z0-9._-]/-/g')
    if [ ! -e $file ]; then
      echo "File $file doesn't exist."
      return 1
    fi

    if [ -d $file ]; then
      # zip directory and transfer
      local zipfile=$( mktemp -t transferXXX.zip )
      cd $(dirname $file) && zip -r -q - $(basename $file) >> $zipfile
      curl --progress-bar --upload-file "$zipfile" "https://transfer.sh/$basefile.zip" >> $tmpfile
      rm -f $zipfile
    else
      # transfer file
      curl --progress-bar --upload-file "$file" "https://transfer.sh/$basefile" >> $tmpfile
    fi
  else
    # transfer pipe
    curl --progress-bar --upload-file "-" "https://transfer.sh/$file" >> $tmpfile
  fi

  # cat output link
  cat $tmpfile
  cat $tmpfile | pbcopy
  echo
  echo (Copied to clipboard)
  # cleanup
  rm -f $tmpfile
}

mc () {
  # Create a new directory and enter it
  mkdir -p "$@" && cd "$@"
}

# What's this?
# j() {
#   [ $# -gt 0 ] && _z "$*" && return
#   cd "$(_z -l 2>&1 | fzf --height 40% --nth 2.. --reverse --inline-info +s --tac --query "${*##-* }" | sed 's/^[0-9,.]* *//')"
# }

# antibody-install () {
#   local chezmoiPath=$(chezmoi source-path)
#   echo "$1" >> ~/.antibody
#   antibody bundle < ~/.antibody > ~/.zsh_plugins
#   cp ~/.antibody $chezmoiPath/dot_antibody
#   cp ~/.zsh_plugins $chezmoiPath/dot_zsh_plugins
#   source ~/.zsh_plugins
#   echo $1
# }

gdrive_download () {
  local CONFIRM=$(wget --quiet --save-cookies /tmp/cookies.txt --keep-session-cookies --no-check-certificate "https://docs.google.com/uc?export=download&id=$1" -O- | gsed -rn 's/.*confirm=([0-9A-Za-z_]+).*/\1\n/p')
  wget --load-cookies /tmp/cookies.txt "https://docs.google.com/uc?export=download&confirm=$CONFIRM&id=$1" -O $2
  rm -rf /tmp/cookies.txt
}

github-clone-and-cd() {
	mkdir -p ~/src/github.com/$(dirname $1) && \
  git clone https://github.com/$1.git ~/src/github.com/$1 && \
  cd ~/src/github.com/$1
}

pyclean () {
  # Cleans py[cod] and __pychache__ dirs in the current tree:
  find . | grep -E "(__pycache__|\.py[cod]$)" | xargs rm -rf
}

pipenv-shell () {
  # pipenv shell breaks sometimes. This does not.
  source "$(pipenv --venv)/bin/activate"
}

_dnsimple_api_call_create_record () {
    # $1    $2      $3      $4
    # name  type    content ttl
    source ~/.shell/.dnsimple-secrets
    echo "> $2 $1.$DNSIMPLE_DOMAIN will resolve to $3"
    echo
    curl \
        -H "Authorization: Bearer $DNSIMPLE_API_KEY" \
        -H 'Accept: application/json' \
        -H 'Content-Type: application/json' \
        -X POST \
        -d "{\"name\": \"$1\",\"type\": \"$2\",\"content\": \"$3\",\"ttl\": $4}" \
        https://api.dnsimple.com/v2/$DNSIMPLE_ID/zones/$DNSIMPLE_DOMAIN/records
    echo
    echo
}

resolve-cf () {
  # resolve $1 to Cloudflare proxy IPs
  _dnsimple_api_call_create_record $1 "A" "198.41.214.162" 3600
  _dnsimple_api_call_create_record $1 "A" "198.41.215.162" 3600
  _dnsimple_api_call_create_record $1 "AAAA" "2606:4700::6811:d109" 3600
  _dnsimple_api_call_create_record $1 "AAAA" "2606:4700::6811:d209" 3600
}
